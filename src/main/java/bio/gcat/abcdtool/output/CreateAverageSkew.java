package bio.gcat.abcdtool.output;

import bio.gcat.abcdtool.gatherfiles.Sequence;
import org.apache.commons.math3.stat.descriptive.DescriptiveStatistics;
import org.apache.commons.math3.util.MathUtils;

import java.io.*;
import java.lang.reflect.Array;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This class uses the Skew files generated by the tool and calculates an average value for the skew
 */
public class CreateAverageSkew {
    public static void main(String[] args) throws IOException {
        File names = new File(args[0]);
        BufferedReader br = new BufferedReader(new FileReader(names));
        String line;
        Map<String, ArrayList<Double>> storage = new HashMap<>();
        while ((line = br.readLine()) != null) {
            if (line.trim().equals("")) {
                continue;
            }
            String[] lineSplit = line.split(":");
            // print the line.
            ArrayList<Double> list = storage.getOrDefault(lineSplit[0], new ArrayList<>());
            list.add(Double.parseDouble(lineSplit[lineSplit.length - 1]));
            storage.put(lineSplit[0], list);
        }
        br.close();
        Map<String, Double> averageValues = new HashMap<>();
        for (String s : storage.keySet()) {
            List<Double> frequencies = storage.get(s);
            double average = getAverage(frequencies);
            averageValues.put(s, average);
        }
        File ATSkew = new File("Output/ATSKEWMeanRest.txt");
        if (!ATSkew.exists()) {
            ATSkew.getParentFile().mkdirs();
        }
        PrintWriter out = new PrintWriter(new FileOutputStream(
                ATSkew));
        for (String s : averageValues.keySet()) {
            String doubleValue = averageValues.get(s)+ "";
            doubleValue = doubleValue.replaceAll("\\.",",");
            String output = s+ " : " + doubleValue;
            out.println(output);

        }
        out.flush();
        out.close();
    }

    private static double getAverage(List<Double> frequencies) {
        DescriptiveStatistics stats = new DescriptiveStatistics();
        for (int i = 0; i < frequencies.size(); i++) {
            stats.addValue(frequencies.get(i));
        }
//        return stats.getPercentile(50); //mean
return stats.getMean();
    }
}
